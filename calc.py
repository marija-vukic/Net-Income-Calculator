'''
File Name: main.py
Dependencies: none
Purpose: Contains code that runs the operations
'''
def doctests():
    """
    >>> p = Calc()
    >>> p.sales_revenue_calc(7, 35)
    245
    """
    return 

class Calc():
    """
    A class that calculates net income.
    """
    def __init__(self):
        """
        A constructor that initializes the instances necessary to make the
        calculations in this calculator.
        """
        self.net_income = 0
        self.total_expenses = 0
        self.sales_revenue = 0
        self.cogs = 0
        self.avg_sales_price = 0
        self.open_inven = 0
        self.purchases = 0
        self.closing_inven = 0
        self.operating_exp = 0
        self.quant_sold = 0

    def sales_revenue_calc(self, quant_sold, avg_sales_price):
        """
        A getter method that calculates sales revenue.
        quant_sold = sales: quantity sold
        avg_sales_price = average sales price per good
        sales_revenue = income generated from the sales: quant_sold * avg_sales_price
        """
        self.quant_sold += quant_sold
        self.avg_sales_price += avg_sales_price
        sales_revenue = self.quant_sold * self.avg_sales_price
        return sales_revenue

    def cogs_calc(self, open_inven, purchases, closing_inven):
        """
        A getter method that calculates cost of goods sold.
        open_inven = opening inventory: value of inventory at the beginning of the period
        purchases = purchases: cost of additional inventory acquired during the period
        closing_inven = cloisng inventory: value of inventory at the end of the period
        cogs = cost of goods sold: open_inven + purchases - closing_inven
        """
        self.open_inven += open_inven
        self.purchases += purchases
        self.closing_inven = closing_inven
        cogs = self.open_inven + self.purchases - self.closing_inven
        return cogs

    def total_exp_calc(self, operating_exp):
        """
        A getter method that calculates total expense
        operating_exp = operating expenses: combination of bills, salary, rent, etc.
        cogs = cost of goods sold
        total_expenses = cogs + operating expenses
        ^  total amount of money generated by the company through its primary operations
        """
        self.operating_exp = operating_exp
        total_expenses = self.cogs + self.operating_exp
        return total_expenses

    def net_income_calc(self):
        """
        net_income: total_revenue - total_expenses
        returns whether or not you have had a gain or loss or broken even in your company.
        """
        net_income = self.sales_revenue - self.total_expenses
        if net_income > 0:
            return f'You have a net profit of {net_income}! Keep up the good work :)'
        if net_income < 0:
            return f'You have net loss of {net_income}... You should consider your business model and money management processes.'
        else:
            return f'You have broken even! While you have not gained a profit you have successfully evaded net loss. We suggest you identify areas of inefficiency and implement more consistent revenue growth strategies.'